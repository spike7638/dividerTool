// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as DrawingToSVG$DividerEditor from "./DrawingToSVG.bs.js";
import * as EditorComponent$DividerEditor from "./EditorComponent.bs.js";

import './Controls.css';
;

function tooltipLabel(target, labelText, tooltipText) {
  return React.createElement("div", {
              className: "tooltip"
            }, React.createElement("label", {
                  htmlFor: "\"" + target + "\""
                }, labelText), React.createElement("span", {
                  className: "tooltiptext"
                }, tooltipText));
}

function Controls(Props) {
  var state = Props.state;
  var dispatch = Props.dispatch;
  return React.createElement("main", undefined, React.createElement("div", {
                  className: "Controls"
                }, React.createElement("header", {
                      className: "Controls-header"
                    }, React.createElement("div", undefined, React.createElement("h3", undefined, "Dimensions (in inches)"), tooltipLabel("thickness", "Thickness ", "The thickness of the material used for making dividers. For 3mm plywood, for instance, 0.19 is approximately correct."), React.createElement("input", {
                              id: "thickness",
                              max: "0.75",
                              min: "0",
                              name: "thickness",
                              step: 0.001,
                              type: "number",
                              value: state.data.thickness.toString(),
                              onChange: (function ($$event) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeThickness */1,
                                              _0: Number($$event.target.value)
                                            });
                                })
                            }), React.createElement("br", undefined), tooltipLabel("drawerWidth", "Drawer width ", "The overall side-to-side measurement of the divider assembly, typically the width of the drawer in which it sits, minus perhaps .01 inch"), React.createElement("input", {
                              id: "drawerWidth",
                              max: "60.0",
                              min: "0",
                              name: "width",
                              step: 0.001,
                              type: "number",
                              value: state.data.width.toString(),
                              onChange: (function ($$event) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeWidth */2,
                                              _0: Caml_format.caml_float_of_string($$event.target.value)
                                            });
                                })
                            }), React.createElement("br", undefined), tooltipLabel("drawerDepth", "Drawer depth ", "The overall front-to-back measurement of the divider assembly, typically the depth of the drawer in which it sits, minus perhaps .01 inch"), React.createElement("input", {
                              id: "drawerDepth",
                              max: "60.0",
                              min: "0",
                              name: "depth",
                              step: 0.001,
                              type: "number",
                              value: state.data.depth.toString(),
                              onChange: (function ($$event) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeDepth */3,
                                              _0: Caml_format.caml_float_of_string($$event.target.value)
                                            });
                                })
                            }), React.createElement("br", undefined), tooltipLabel("height", "Divider height ", "The height of the divider assembly at its highest point (typically a crossing of panels)"), React.createElement("input", {
                              id: "height",
                              max: "6.0",
                              min: "0",
                              name: "height",
                              step: 0.001,
                              type: "number",
                              value: state.data.height.toString(),
                              onChange: (function ($$event) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeHeight */4,
                                              _0: Caml_format.caml_float_of_string($$event.target.value)
                                            });
                                })
                            }), React.createElement("br", undefined), tooltipLabel("spacing", "Distance between dots ", "The distance between dots in the divider drawing. The is also smallest distance between panel-centers. The distance between panels drawn through adjacent dots is this amount, MINUS one panel-thickness. So if the dot-spacing is 1 inch, and you are using 1/4-inch material, the gap between adjacent panels will be only 3/4 of an inch.\n         "), React.createElement("input", {
                              id: "spacing",
                              max: "6.0",
                              min: "0",
                              name: "spacing",
                              step: 0.001,
                              type: "number",
                              value: state.data.spacing.toString(),
                              onChange: (function ($$event) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeSpacing */6,
                                              _0: Caml_format.caml_float_of_string($$event.target.value)
                                            });
                                })
                            }), React.createElement("br", undefined), tooltipLabel("restart", "Restart design", "Press this button to remove all panels from the current design (except for the four outer panels, which are always there at the start, but which you can easily remove if you like); you probably want to do this if (and only if) you've changed the dot-spacing, width, or depth."), React.createElement("button", {
                              id: "restart",
                              onClick: (function (param) {
                                  Curry._1(dispatch, {
                                        TAG: /* ChangeStart */11,
                                        _0: true
                                      });
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeStart */11,
                                              _0: false
                                            });
                                })
                            }, "Restart Design"), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("h3", undefined, "Options "), React.createElement("label", {
                              htmlFor: "dipPercentageV"
                            }, "Depth of dip as percentage of height (0 means 'no dip') for front-to-back panels "), React.createElement("input", {
                              id: "dipPercentageV",
                              max: "100",
                              min: "0",
                              name: "dipPercentageV",
                              type: "number",
                              value: state.data.dipPercentageV.toString(),
                              onChange: (function ($$event) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeDipPercentageV */8,
                                              _0: Caml_format.caml_float_of_string($$event.target.value)
                                            });
                                })
                            }), React.createElement("br", undefined), React.createElement("label", {
                              htmlFor: "dipPercentageH"
                            }, "Depth of dip as percentage of height for left-right panels "), React.createElement("input", {
                              id: "dipPercentageH",
                              max: "100",
                              min: "0",
                              name: "dipPercentageH",
                              type: "number",
                              value: state.data.dipPercentageH.toString(),
                              onChange: (function ($$event) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeDipPercentageH */7,
                                              _0: Caml_format.caml_float_of_string($$event.target.value)
                                            });
                                })
                            }), React.createElement("br", undefined), tooltipLabel("refresh", "Refresh SVG   ", "Press this button to both show the text of the SVG description producedby the current drawing (in the tan box), and to update the visualization of that SVG below the drawing-editor."), React.createElement("button", {
                              id: "refresh",
                              onClick: (function (param) {
                                  return Curry._1(dispatch, {
                                              TAG: /* ChangeDrawing */10,
                                              _0: EditorComponent$DividerEditor.getStrokes(undefined)
                                            });
                                })
                            }, "Refresh SVG"), React.createElement("br", undefined), React.createElement("div", {
                              className: "svgtext1"
                            }, React.createElement("pre", {
                                  className: "svgtext",
                                  type: "svgtext"
                                }, DrawingToSVG$DividerEditor.dividerToSVG(DrawingToSVG$DividerEditor.drawingToDivider(state, EditorComponent$DividerEditor.getStrokes(undefined)))))))));
}

var make = Controls;

export {
  tooltipLabel ,
  make ,
  
}
/*  Not a pure module */
